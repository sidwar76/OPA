name: DevSecOps Pipeline

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  check_dockerfile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Replace 'x' with the desired Python version (e.g., 3.8)

      - name: Install dockerfile2json
        run: pip install dockerfile2json

      # Convert Dockerfile to JSON format
      - name: Convert Dockerfile to JSON
        run: dockerfile2json ./Dockerfile > Dockerfile.json

      - name: Run Dockerfile checker
        run: |
          python dockerfile_checker.py > policy_report.txt
          
      # Publish the policy_report.txt as an artifact
      - name: Publish Policy Report
        uses: actions/upload-artifact@v2
        with:
          name: policy-report
          path: ./policy_report.txt

  secret_scanning:
    name: secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: pull TruffleHog
        run: docker pull gesellix/trufflehog

      - name: Run TruffleHog
        run: |
          # Run TruffleHog and capture the output in trufflehog-report.json
          docker run -t gesellix/trufflehog --json https://github.com/sidwar76/OPA.git > trufflehog-report.json
        # Publish the TruffleHog report as an artifact
      - name: Publish TruffleHog Report
        uses: actions/upload-artifact@v2
        with:
            name: trufflehog-report
            path: ./trufflehog-report.json
      - name: Download Gitleaks Binary
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.17.0/gitleaks_8.17.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.17.0_linux_x64.tar.gz -C /tmp
          chmod +x /tmp/gitleaks
      - name: Move Gitleaks Binary to /usr/local/bin
        run: sudo mv /tmp/gitleaks /usr/local/bin/

      - name: Debug
        run: ls /usr/local/bin/
      - name: help
        run: gitleaks --help

      - name: Run Gitleaks Scan
        run: |
          # Replace 'https://github.com/owner/repo.git' with the actual repository URL
          REPO_URL='https://github.com/sidwar76/hashedin.git'
          CUSTOM_RULES='{
            "rules": [
              {
                "regex": "(password|api_key|secret)",
                "description": "Potential sensitive information",
                "tags": ["high_severity"]
              },
              {
                "regex": "(access_key|private_key)",
                "description": "Potential access keys",
                "tags": ["high_severity"]
              },
              {
                "file": "\\.env|config\\.json",
                "description": "Potential configuration files",
                "tags": ["medium_severity"]
              }
            ]
          }'
          # Save custom rules to a temporary file
          echo "$CUSTOM_RULES" > CUSTOM_RULES.json
          # Run Gitleaks scan with custom rules and the repository URL
          gitleaks detect -c gitleaks.toml --report-path gitleaks-report.json -f json 
      - name: Upload Gitleaks Scan Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks-scan-report
          path: gitleaks-report.json
          


  build_and_scan:
    name: Build, Sign & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up GPG keys
        run: |
          # Read the private key from the file
          cat private_key.asc | gpg --import -
        working-directory: ${{ github.workspace }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and sign Docker image
        run: |
          # Create and use the Buildx builder
          docker buildx create --use
          # Build the Docker image with multi-platform support and tag with GitHub SHA
          docker buildx build --platform linux/amd64,linux/arm64 --push -t sidwar/myapp:${{ github.sha }} .
        env:
          # Set environment variables for the Docker build command
          DOCKER_CLI_ACI: 1
          DOCKER_BUILDKIT: 1
          DOCKER_CONTENT_TRUST: 1
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}


      - name: Import public key for verification
        run: |
          # Read the public key from the file and import it
          gpg --import public_key.asc

      - name: Generate Sign Image Report
        run: |
          # Use `docker trust inspect` to get the signing information for the built image
          docker trust inspect sidwar/myapp:${{ github.sha }} > sign-image-report.txt

      - name: Upload Sign Image Report
        uses: actions/upload-artifact@v2
        with:
          name: sign-image-report
          path: ./sign-image-report.txt
          
  vulnerability_scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Vulnerability Scanning
        run: |
          # Use Trivy for vulnerability scanning and capture the output in trivy-report.json
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/root/ aquasec/trivy:latest image --vuln-type="os,library" sidwar/myapp:${{ github.sha }} > trivy-report.json
        # Publish the vulnerability scanning report as an artifact
      - name: Publish Vulnerability Scanning Report
        uses: actions/upload-artifact@v2
        with:
          name: vulnerability-report
          path: ./trivy-report.json

