name: DevSecOps Pipeline

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  check_dockerfile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Replace 'x' with the desired Python version (e.g., 3.8)

      - name: Install dockerfile2json
        run: pip install dockerfile2json

      # Convert Dockerfile to JSON format
      - name: Convert Dockerfile to JSON
        run: dockerfile2json ./Dockerfile > Dockerfile.json

      - name: Run Dockerfile checker
        run: |
          python dockerfile_checker.py > policy_report.txt
          
      # Publish the policy_report.txt as an artifact
      - name: Publish Policy Report
        uses: actions/upload-artifact@v2
        with:
          name: policy-report
          path: ./policy_report.txt

  secret_scanning:
    name: Secret Scanning (Gitleaks and TruffleHog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Gitleaks Binary
        run: |
          wget https://github.com/zricethezav/gitleaks/releases/download/v7.7.0/gitleaks_linux_amd64
          chmod +x gitleaks_linux_amd64
          sudo mv gitleaks_linux_amd64 /usr/local/bin/gitleaks

      - name: Run Gitleaks Scan
        run: |
          # Replace 'https://github.com/owner/repo.git' with the actual repository URL
          REPO_URL='https://github.com/sidwar76/hashedin.git'
          CUSTOM_RULES='{
            "rules": [
              {
                "regex": "(password|api_key|secret)",
                "description": "Potential sensitive information",
                "tags": ["high_severity"]
              },
              {
                "regex": "(access_key|private_key)",
                "description": "Potential access keys",
                "tags": ["high_severity"]
              },
              {
                "file": "\\.env|config\\.json",
                "description": "Potential configuration files",
                "tags": ["medium_severity"]
              }
            ]
          }'
          # Save custom rules to a temporary file
          echo "$CUSTOM_RULES" > CUSTOM_RULES.json
          # Run Gitleaks scan with custom rules and the repository URL
          gitleaks --config=CUSTOM_RULES.json --verbose --repo=$REPO_URL

      - name: Pull TruffleHog
        run: docker pull gesellix/trufflehog

      - name: Run TruffleHog
        run: |
          # Run TruffleHog and capture the output in trufflehog-report.json
          docker run -t gesellix/trufflehog --json https://github.com/sidwar76/OPA.git > trufflehog-report.json

      - name: Upload Gitleaks Scan Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks-scan-report
          path: gitleaks-report.json

      - name: Publish TruffleHog Report
        uses: actions/upload-artifact@v2
        with:
            name: trufflehog-report
            path: ./trufflehog-report.json

  build_and_scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t sidwar/myapp:${{ github.sha }} .

      - name: Docker Logout
        run: docker logout

      - name: Docker Login
        run: |
          # Log in to Docker Hub or the desired container registry using environment variables
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push sidwar/myapp:${{ github.sha }}

      - name: Vulnerability Scanning
        run: |
          # Use Trivy for vulnerability scanning and capture the output in trivy-report.json
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/root/ aquasec/trivy:latest image --vuln-type="os,library" sidwar/myapp:${{ github.sha }} > trivy-report.json
        # Publish the vulnerability scanning report as an artifact
      - name: Publish Vulnerability Scanning Report
        uses: actions/upload-artifact@v2
        with:
            name: vulnerability-report
            path: ./trivy-report.json

      - name: Verify and Sign Image
        run: |
          # Verify if the Docker image is signed
          if docker trust inspect --pretty sidwar/myapp:${{ github.sha }} &> /dev/null; then
            echo "Image is already signed."
          else
            echo "Image is not signed. Signing the image using cosign..." > sign-image-report.txt
          fi
        # Publish the sign image report as an artifact
      - name: Publish Sign Image Report
        uses: actions/upload-artifact@v2
        with:
            name: sign-image-report
            path: ./sign-image-report.txt

